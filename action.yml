name: 'Deploy to SFTP'
description: 'Deploy to an SFTP server with no downtime'

inputs:
  keep_folders:
    description: "The list of folder that should not be changed on the remote, in JSON list format"
    type: string
    default: '[]'
    required: false
  host:
    description: "The server host or ip"
    type: string
    required: true
  port:
    description: "The server port"
    default: 22
    required: false
  local_path:
    description: "The local path to deploy"
    type: string
    default: './'
    required: false
  remote_path:
    description: "The remote path in which to deploy"
    type: string
    required: true
  user:
    description: "The SSH use to use"
    type: string
    required: true
  private_key:
    description: "The SSH private key used for authentication"
    type: string
    required: true

runs:
  using: "composite"
  steps:
    - name: Get formatted datetime
      id: date
      shell: bash
      run: echo "value=$(date +%Y-%m-%d_%H-%M)" >> $GITHUB_OUTPUT

    - name: Setup remote filesystem structure
      uses: appleboy/ssh-action@v1.2.0
      with:
        host: ${{ inputs.host }}
        port: ${{ inputs.port }}
        username: ${{ inputs.user }}
        key: ${{ inputs.private_key }}
        script: |
          cd ${{ inputs.remote_path }}
          if [ ! -d "versions" ]; then
            mkdir "versions"
          fi
          if [ ! -d "permanent" ]; then
            mkdir "permanent"
          fi
          mkdir "versions/${{ steps.date.outputs.value }}"

    - name: Deploy to server
      uses: wlixcc/SFTP-Deploy-Action@v1.2.5
      with:
        server: ${{ inputs.host }}
        port: ${{ inputs.port }}
        username: ${{ inputs.user }}
        ssh_private_key: ${{ inputs.private_key }}
        local_path: '${{ inputs.local_path }}'
        remote_path: '${{ inputs.remote_path }}/versions/${{ steps.date.outputs.value }}'

    - name: Finish deployment
      uses: appleboy/ssh-action@v1.2.0
      with:
        host: ${{ inputs.host }}
        port: ${{ inputs.port }}
        username: ${{ inputs.user }}
        key: ${{ inputs.private_key }}
        script: |
          cd ${{ inputs.remote_path }}

          # Link permanent directories
          for name in '${{ join(fromJSON(inputs.keep_folders), ''' ''') }}'; do
            if [ ! -d "permanent/$name" ]; then
              mkdir "permanent/$name"
            fi
            ln -s "${{ inputs.remote_path }}/permanent/$name" "${{ inputs.remote_path }}/versions/${{ steps.date.outputs.value }}/$name"
          done

          # Update current link
          ln -snf "${{ inputs.remote_path }}/versions/${{ steps.date.outputs.value }}/" "${{ inputs.remote_path }}/current"
  
